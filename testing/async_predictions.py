import nest_asyncionest_asyncio.apply()import asyncioimport aiohttpimport osimport timeimport systest_data=open(os.path.join(os.getcwd(),"ML","data","test.csv"),'rb').read()target_variable='species'url="http://127.0.0.1:8000/get_prediction"no_of_api_calls=int(sys.argv[1]) or 100batch_size=10auth=aiohttp.BasicAuth('admin','password')#from aiohttp import ClientSession as session#session.post(url=url,data = {'csv_file':test_data,'target_variable': target_variable},auth=auth)async def call_api():    async with aiohttp.ClientSession() as session:        for i in range(batch_size):            async with session.post(url,                                    data = {'csv_file':test_data,'target_variable': target_variable},                                    auth=auth) as response:                text = await response.text()                print(text)           async def predict_aysnc():    request_times=round(no_of_api_calls/batch_size)    await asyncio.gather(*[asyncio.create_task(call_api()) for i in range(request_times)])start_time=time.time()print("Started shooting testing API requests")asyncio.run(predict_aysnc())end_time=time.time()print("Tested predict API with ",no_of_api_calls," requests and it took ",str(round((end_time-start_time)/60)) ," minutes") 